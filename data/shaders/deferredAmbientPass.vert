///////////////////////////////////////////////////////////////////////////////
// Deferred Shading - Ambient + Emission Shader
// 
// This shader is part of the deferred shading pipeline. It applies ambient
// lighting and emitted (unattentuated) color of objects.
// 
// Copyright (C) 2012 Florian Nuecke
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// We use this with OpenGL 3.3 capabilities, so require shader version 3.3
#version 330
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// We just need the modelviewmatrix, because we simply render a quad.
uniform mat4 ModelViewProjectionMatrix;
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// We need the vertex position to draw the quad.
layout(location=0) in vec4 ModelVertex;
// And the texture coordinate, which represents the coordinate in the g-buffer
// we'll be reading our data from.
layout(location=8) in vec2 TextureCoordinate;
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// We pass on the texture coordinate as is.
out vec2 fs_TextureCoordinate;
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Main routine, does what a main does. Freakin' EVERYTHING!
void main(void) {
	// Compute vertex position in projection space.
	gl_Position = ModelViewProjectionMatrix * ModelVertex;

	// Pass on the texture coordinate.
	fs_TextureCoordinate = TextureCoordinate;
}
///////////////////////////////////////////////////////////////////////////////
